name: ECS Deployment

on:
  # workflow_dispatch:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      # - '.github/workflows/*'
      - 'test/**'
      - '**.md'

env:
  ECS_TASK_DEFINITION: ./aws/task-definition/production.json

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch

        run: |
          echo "The GITHUB_REF is: $GITHUB_REF"
          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          if [ "$BRANCH_NAME" = "develop" ]; then
            echo "stage=dev" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" = "main" ]; then
            echo "stage=prod" >> $GITHUB_ENV
          else
            echo "Error: Unsupported branch name '$BRANCH_NAME'. Workflow will now exit."
            exit 1
          fi

      - name: Get Code
        uses: actions/checkout@v4

      - name: test branch
        run: |
          ls -a
          echo "The branch is env : ${{ env.stage }}"

      # Enable QEMU for ARM64 emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create .env-cmdrc file
        run: echo "${{ secrets.ENV_CMDRC }}" > .env-cmdrc

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --target ${{env.stage}} --platform linux/arm64 -t $ECR_REGISTRY/${{env.stage}}/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{env.stage}}/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{env.stage}}/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "output - $ECR_REGISTRY/${{env.stage}}/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Create ECS Task Definition JSON
      #   run: |
      #     if [ "$BRANCH_NAME" = "main" ]; then
      #       echo "${{ secrets.PROD_TASK_DEFINITION }}" > ${{env.stage}}.json
      #     fi

      #     if [ "$BRANCH_NAME" = "develop" ]; then
      #       echo "${{ secrets.DEV_TASK_DEFINITION }}" > ${{env.stage}}.json
      #     fi

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   env:
      #     CONTAINER_NAME: hotel-job-api
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Debug new task definition output
      #   run: echo ${{ steps.task-def.outputs.task-definition }}

      # - name: Upload new task definition
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: new-task-definition
      #     path: ${{ steps.task-def.outputs.task-definition }}

      # - name: Deploy Amazon ECS task definition
      #   env:
      #     ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      #     ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
