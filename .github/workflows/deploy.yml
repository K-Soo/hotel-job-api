name: ECS Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      # - '.github/workflows/*'
      - 'test/**'
      - '**.md'

# permissions:
  # contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch

        run: |
          echo "The GITHUB_REF is: $GITHUB_REF"
          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          if [ "$BRANCH_NAME" = "develop" ]; then
            echo "stage=dev" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" = "main" ]; then
            echo "stage=prod" >> $GITHUB_ENV
          else
            echo "Error: Unsupported branch name '$BRANCH_NAME'. Workflow will now exit."
            exit 1
          fi

      - name: Get Code
        uses: actions/checkout@v4

      - name: Create ENV JSON File
        id: env-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: ".env-cmdrc.json"
          json: ${{ secrets.ENV_CMDRC }}

      # - name: Create task JSON File
      #   id: task-json
      #   uses: jsdaniell/create-json@1.1.2
      #   with:
      #     name: "task-definition.json"
      #     json: ${{ env.task_definition }}

      # - name: test branch
      #   run: |
      #     ls -a
      #     cat .env-cmdrc.json
      #     echo "The branch is env : ${{ env.stage }}"

      # Enable QEMU for ARM64 emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --target ${{env.stage}} --platform linux/arm64 -t $ECR_REGISTRY/${{env.stage}}/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{env.stage}}/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{env.stage}}/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          # echo "output - $ECR_REGISTRY/${{env.stage}}/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download ECS Task Definition 
        run: |
          aws ecs describe-task-definition \
          --task-definition hotel-job-api-${{env.stage}}-task \
          --query taskDefinition \
          --region ${{ secrets.AWS_REGION }} \
          | jq -r 'del(
              .taskDefinitionArn,
              .requiresAttributes,
              .compatibilities,
              .revision,
              .status,
              .registeredAt,
              .registeredBy
            )' > task-definition.json
          # aws ecs describe-task-definition \
          # --task-definition hotel-job-api-${{env.stage}}-task \
          # --query taskDefinition \
          # --region ${{ secrets.AWS_REGION }} > task-definition.json

      - name: Debug Task Definition JSON
        run: |
          echo "The content of the Task Definition JSON file is:"
          cat task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{env.stage}}-hotel-job-api
          image: ${{ steps.build-image.outputs.image }}

      # - name: Upload new task definition
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: new-task-definition
      #     path: ${{ steps.task-def.outputs.task-definition }}

      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
